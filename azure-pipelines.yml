trigger:
- master

# ‰ΩøÁî®Ëá™ÊâòÁÆ°‰ª£ÁêÜÊ±†ÔºåÂä†Âø´ CI/CD ÈÄüÂ∫¶
pool:
  name: 'SenparcOpenSource'

variables:
  - group: NcfGitHubTokenVariableGroup
  - name: solution
    value: '**/NCF.sln'
  - name: templateBuild
    value: '**/NCF.Template.sln'
  - name: webProject
    value: 'src/back-end/Senparc.Web/Senparc.Web.csproj'
  - name: buildConfiguration
    value: 'Release'
  - name: NUGET_PACKAGES
    value: $(Agent.ToolsDirectory)/nuget/packages
  - name: version
    value: '$(Build.BuildId)'

jobs:
- job: BuildAndRelease
  pool:
    name: 'SenparcOpenSource'
  steps:
    # üîß È™åËØÅ GitHub CLI
    - task: PowerShell@2
      displayName: 'Verify GitHub CLI'
      inputs:
        targetType: 'inline'
        script: |
          # Â∞ùËØïÂ§öÁßçÊñπÂºèÊü•ÊâæÂíåÈ™åËØÅ GitHub CLI
          try {
              Write-Host "Attempting to verify GitHub CLI installation..."
              
              # ÊñπÊ≥ï1: Áõ¥Êé•Ë∞ÉÁî® gh
              $ghVersion = gh --version 2>$null
              if ($ghVersion) {
                  Write-Host "‚úÖ GitHub CLI found and working:"
                  Write-Host $ghVersion
              } else {
                  throw "Direct gh command failed"
              }
          } catch {
              try {
                  # ÊñπÊ≥ï2: Â∞ùËØïÂ∏∏ËßÅÂÆâË£ÖË∑ØÂæÑ
                  $commonPaths = @(
                      "${env:ProgramFiles}\GitHub CLI\gh.exe",
                      "${env:ProgramFiles(x86)}\GitHub CLI\gh.exe",
                      "${env:LOCALAPPDATA}\Programs\GitHub CLI\gh.exe",
                      "C:\Program Files\GitHub CLI\gh.exe",
                      "C:\Program Files (x86)\GitHub CLI\gh.exe"
                  )
                  
                  $foundPath = $null
                  foreach ($path in $commonPaths) {
                      if (Test-Path $path) {
                          $foundPath = $path
                          break
                      }
                  }
                  
                  if ($foundPath) {
                      Write-Host "‚úÖ Found GitHub CLI at: $foundPath"
                      & "$foundPath" --version
                      # Ê∑ªÂä†Âà∞ PATH
                      $dirPath = Split-Path $foundPath -Parent
                      Write-Host "##vso[task.setvariable variable=PATH]${env:PATH};$dirPath"
                  } else {
                      Write-Host "‚ùå GitHub CLI not found in common locations"
                      Write-Host "Available paths checked:"
                      $commonPaths | ForEach-Object { Write-Host "  - $_" }
                      throw "GitHub CLI not found"
                  }
              } catch {
                  Write-Host "‚ö†Ô∏è  GitHub CLI verification failed, but continuing..."
                  Write-Host "##vso[task.logissue type=warning]GitHub CLI verification failed but build continues"
              }
          }

    # üîß ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè
    - task: PowerShell@2
      displayName: 'Setup Environment'
      inputs:
        targetType: 'inline'
        script: |
          # ËÆæÁΩÆ GitHub token
          $env:GH_TOKEN = "$(GH_TOKEN)"
          Write-Host "##vso[task.setvariable variable=GH_TOKEN;issecret=true]$(GH_TOKEN)"
          
          # È™åËØÅ GitHub ËÆ§ËØÅ
          gh auth status

    # ‚úÖ ÂèëÂ∏ÉÂà∞‰∏çÂêåÂπ≥Âè∞
    - task: PowerShell@2
      displayName: 'Publish to Multiple Platforms'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Publishing Windows x64 platform"
          dotnet publish $(webProject) --configuration $(buildConfiguration) --runtime win-x64 --output $(Build.ArtifactStagingDirectory)/win-x64

          Write-Host "Publishing Windows ARM64 platform (Surface Pro X, etc.)"
          dotnet publish $(webProject) --configuration $(buildConfiguration) --runtime win-arm64 --output $(Build.ArtifactStagingDirectory)/win-arm64

          Write-Host "Publishing Linux x64 platform"
          dotnet publish $(webProject) --configuration $(buildConfiguration) --runtime linux-x64 --output $(Build.ArtifactStagingDirectory)/linux-x64

          Write-Host "Publishing Linux ARM64 platform"
          dotnet publish $(webProject) --configuration $(buildConfiguration) --runtime linux-arm64 --output $(Build.ArtifactStagingDirectory)/linux-arm64

          Write-Host "Publishing macOS x64 platform (Intel/Rosetta)"
          dotnet publish $(webProject) --configuration $(buildConfiguration) --runtime osx-x64 --output $(Build.ArtifactStagingDirectory)/osx-x64

          Write-Host "Publishing macOS ARM64 platform (Apple Silicon)"
          dotnet publish $(webProject) --configuration $(buildConfiguration) --runtime osx-arm64 --output $(Build.ArtifactStagingDirectory)/osx-arm64

    # üü¢ ÁºìÂ≠ò NuGet Âèä‰æùËµñÈ°π
    - task: Cache@2
      inputs:
        key: 'nuget | "$(Agent.OS)" | **/*.csproj'
        path: '$(NUGET_PACKAGES)'
        restoreKeys: 'nuget'
      displayName: 'Cache NuGet Packages'

    # üü¢ ÁºìÂ≠ò Aspire Workload
    - task: Cache@2
      inputs:
        key: 'aspire-workload | "$(Agent.OS)"'
        path: '~/.dotnet'
        restoreKeys: 'aspire-workload'
      displayName: 'Cache Aspire Workload'

    # üü¢ ÁºìÂ≠ò NuGet Â∑•ÂÖ∑
    - task: Cache@2
      inputs:
        key: 'nuget-tool | "$(Agent.OS)"'
        path: 'C:\ProgramData\nuget'
        restoreKeys: 'nuget-tool'
      displayName: 'Cache NuGet Tool'

    # ‚úÖ ‰ªÖÂΩìÁºìÂ≠òÊú™ÂëΩ‰∏≠Êó∂ÂÆâË£Ö Aspire Workload
    - script: |
        dotnet workload list | findstr /C:"aspire" || dotnet workload install aspire
      displayName: 'Check & Install Aspire Workload'
      condition: ne(variables['CACHE_RESTORED'], 'true')

    # ‚úÖ ‰ΩøÁî®ÁºìÂ≠òÁöÑ NuGet ÁâàÊú¨
    - task: NuGetToolInstaller@1
      displayName: 'Use Cached NuGet 6.3.0'
      inputs:
        versionSpec: '6.3.0'

    - script: |
        nuget sources remove -name nuget.org
      displayName: 'Remove Existing NuGet Source'

    - script: |
        dotnet nuget add source https://api.nuget.org/v3/index.json -n nuget.org
      displayName: 'Add NuGet Source'

    # ‚úÖ ÊÅ¢Â§ç NuGet ‰æùËµñ
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    # ‚úÖ Ëß£ÂÜ≥ÊñπÊ°àÊûÑÂª∫
    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
        platform: 'Any CPU'
        configuration: '$(buildConfiguration)'

    # ‚úÖ ÊÅ¢Â§ç Template ‰æùËµñ
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(templateBuild)'

    # ‚úÖ ÊûÑÂª∫ Template Ëß£ÂÜ≥ÊñπÊ°à
    - task: VSBuild@1
      inputs:
        solution: '$(templateBuild)'
        msbuildArgs: ''
        platform: 'Any CPU'
        configuration: '$(buildConfiguration)'

    # ‚úÖ Êé®ÈÄÅ NuGet ÂåÖÔºàÊîØÊåÅÂ§±Ë¥•ÁªßÁª≠Ôºâ
    - task: NuGetCommand@2
      displayName: Senparc.Ncf.Template
      inputs:
        command: push
        packagesToPush: '**/Senparc.NCF.Template.*.nupkg'
        nuGetFeedType: external
        publishFeedCredentials: 'nuget-jeffrey-full-key'
      continueOnError: true
      condition: succeededOrFailed()

    # üöÄ ÂàõÂª∫ GitHub Release
    - task: PowerShell@2
      displayName: 'Create GitHub Release'
      inputs:
        targetType: 'inline'
        script: |
          try {
              Write-Host "Creating GitHub Release version $(version)"
              
              # Á°Æ‰øù GitHub CLI ÂèØÁî®
              try {
                  $ghVersion = gh --version 2>$null
                  if ($ghVersion) {
                      Write-Host "Using GitHub CLI: $ghVersion"
                  } else {
                      throw "GitHub CLI not accessible"
                  }
              } catch {
                  Write-Host "‚ö†Ô∏è GitHub CLI not found, attempting to locate..."
                  $commonPaths = @(
                      "${env:ProgramFiles}\GitHub CLI\gh.exe",
                      "${env:ProgramFiles(x86)}\GitHub CLI\gh.exe",
                      "C:\Program Files\GitHub CLI\gh.exe"
                  )
                  
                  $ghPath = $null
                  foreach ($path in $commonPaths) {
                      if (Test-Path $path) {
                          $ghPath = $path
                          break
                      }
                  }
                  
                  if ($ghPath) {
                      Write-Host "Found GitHub CLI at: $ghPath"
                      Set-Alias -Name gh -Value $ghPath -Scope Global
                  } else {
                      throw "GitHub CLI not found in any common location"
                  }
              }
              
              # ÂéãÁº©ÂèëÂ∏ÉÊñá‰ª∂‰ª•ÂáèÂ∞ëassetÊï∞Èáè
              Write-Host "Compressing release files..."
              Compress-Archive -Path "$(Build.ArtifactStagingDirectory)/win-x64/*" -DestinationPath "$(Build.ArtifactStagingDirectory)/ncf-win-x64-$(version).zip" -Force
              Compress-Archive -Path "$(Build.ArtifactStagingDirectory)/win-arm64/*" -DestinationPath "$(Build.ArtifactStagingDirectory)/ncf-win-arm64-$(version).zip" -Force
              Compress-Archive -Path "$(Build.ArtifactStagingDirectory)/linux-x64/*" -DestinationPath "$(Build.ArtifactStagingDirectory)/ncf-linux-x64-$(version).zip" -Force
              Compress-Archive -Path "$(Build.ArtifactStagingDirectory)/linux-arm64/*" -DestinationPath "$(Build.ArtifactStagingDirectory)/ncf-linux-arm64-$(version).zip" -Force
              Compress-Archive -Path "$(Build.ArtifactStagingDirectory)/osx-x64/*" -DestinationPath "$(Build.ArtifactStagingDirectory)/ncf-osx-x64-$(version).zip" -Force
              Compress-Archive -Path "$(Build.ArtifactStagingDirectory)/osx-arm64/*" -DestinationPath "$(Build.ArtifactStagingDirectory)/ncf-osx-arm64-$(version).zip" -Force
              
              # È™åËØÅÊñá‰ª∂Â≠òÂú®
              $assetFiles = @(
                  "$(Build.ArtifactStagingDirectory)/ncf-win-x64-$(version).zip",
                  "$(Build.ArtifactStagingDirectory)/ncf-win-arm64-$(version).zip",
                  "$(Build.ArtifactStagingDirectory)/ncf-linux-x64-$(version).zip",
                  "$(Build.ArtifactStagingDirectory)/ncf-linux-arm64-$(version).zip",
                  "$(Build.ArtifactStagingDirectory)/ncf-osx-x64-$(version).zip",
                  "$(Build.ArtifactStagingDirectory)/ncf-osx-arm64-$(version).zip"
              )
              
              foreach ($file in $assetFiles) {
                  if (Test-Path $file) {
                      $size = (Get-Item $file).Length / 1MB
                      Write-Host "‚úÖ Asset ready: $(Split-Path $file -Leaf) ($([math]::Round($size, 2)) MB)"
                  } else {
                      Write-Host "‚ùå Missing asset: $file"
                  }
              }
              
              # ÂàõÂª∫ release
              $releaseNotes = @"
          ## üöÄ NCF Release $(version)
          
          ### üì¶ Âπ≥Âè∞ÊîØÊåÅ
          - **Windows x64** - ÈÄÇÁî®‰∫é‰º†Áªü Windows 10/11 (Intel/AMD 64‰Ωç)
          - **Windows ARM64** - ÈÄÇÁî®‰∫é Surface Pro X, Surface Laptop 5/6 Á≠â ARM Êû∂ÊûÑËÆæÂ§á
          - **Linux x64** - ÈÄÇÁî®‰∫é Linux (Intel/AMD 64‰Ωç)
          - **Linux ARM64** - ÈÄÇÁî®‰∫é Linux (ARM64ÔºåÂ¶ÇÊ†ëËéìÊ¥æ4+)
          - **macOS x64** - ÈÄÇÁî®‰∫é Intel Mac Êàñ Apple Silicon Mac (ÈÄöËøá Rosetta 2)
          - **macOS ARM64** - ÈÄÇÁî®‰∫é Apple Silicon Mac (M1/M2/M3/M4 ÂéüÁîü)
          
          ### üìã ‰ΩøÁî®ÊåáÂçó
          **Windows Áî®Êà∑ËØ∑Ê≥®ÊÑè**Ôºö
          - Â§ßÈÉ®ÂàÜ Windows ËÆæÂ§á‰ΩøÁî® \`ncf-win-x64-$(version).zip\`
          - Surface Pro X Á≠â ARM ËÆæÂ§á‰ΩøÁî® \`ncf-win-arm64-$(version).zip\`
          
          **macOS Áî®Êà∑ËØ∑Ê≥®ÊÑè**Ôºö
          - M1/M2/M3/M4 Mac Áî®Êà∑Êé®Ëçê‰∏ãËΩΩ \`ncf-osx-arm64-$(version).zip\` (ÂéüÁîüÊÄßËÉΩÊõ¥Â•Ω)
          - Intel Mac Áî®Êà∑‰∏ãËΩΩ \`ncf-osx-x64-$(version).zip\`
          - Ëß£ÂéãÂêéÈúÄË¶ÅÁªô‰∫àÊâßË°åÊùÉÈôêÔºö\`chmod +x Senparc.Web\`
          
          ### üìÖ ÊûÑÂª∫‰ø°ÊÅØ
          - ÊûÑÂª∫Âè∑: $(Build.BuildNumber)
          - Ê∫êÂàÜÊîØ: $(Build.SourceBranchName)
          - Êèê‰∫§: $(Build.SourceVersion)
          - ÂèëÂ∏ÉÊó∂Èó¥: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
          
          ### üìã ÂèòÊõ¥
          Êú¨ÁâàÊú¨‰∏∫Ëá™Âä®ÊûÑÂª∫ÂèëÂ∏ÉÔºåËØ¶ÁªÜÂèòÊõ¥ËØ∑Êü•ÁúãÊèê‰∫§ÂéÜÂè≤„ÄÇ
          "@
              
              Write-Host "Creating GitHub Release..."
              gh release create "v$(version)" `
                  --target "$(Build.SourceVersion)" `
                  --title "NCF Release v$(version)" `
                  --notes $releaseNotes `
                  "$(Build.ArtifactStagingDirectory)/ncf-win-x64-$(version).zip" `
                  "$(Build.ArtifactStagingDirectory)/ncf-win-arm64-$(version).zip" `
                  "$(Build.ArtifactStagingDirectory)/ncf-linux-x64-$(version).zip" `
                  "$(Build.ArtifactStagingDirectory)/ncf-linux-arm64-$(version).zip" `
                  "$(Build.ArtifactStagingDirectory)/ncf-osx-x64-$(version).zip" `
                  "$(Build.ArtifactStagingDirectory)/ncf-osx-arm64-$(version).zip"
                  
              Write-Host "‚úÖ GitHub Release created successfully"
          } catch {
              Write-Host "‚ùå Failed to create GitHub Release: $_"
              Write-Host "##vso[task.logissue type=warning]GitHub Release creation failed but build continues"
          }
      env:
        GH_TOKEN: $(GH_TOKEN)
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

    # ‚úÖ ÂèëÂ∏ÉÊûÑÂª∫‰∫ßÁâ©
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'sample'