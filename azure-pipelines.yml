trigger:
- master

# 使用自托管代理池，加快 CI/CD 速度
pool:
  name: 'SenparcOpenSource'

variables:
  - group: NcfGitHubTokenVariableGroup
  - name: solution
    value: '**/NCF.sln'
  - name: templateBuild
    value: '**/NCF.Template.sln'
  - name: webProject
    value: 'src/back-end/Senparc.Web/Senparc.Web.csproj'
  - name: buildConfiguration
    value: 'Release'
  - name: NUGET_PACKAGES
    value: $(Agent.ToolsDirectory)/nuget/packages
  - name: version
    value: '$(Build.BuildId)'

jobs:
- job: BuildAndRelease
  pool:
    name: 'SenparcOpenSource'
  steps:
    # 🔧 安装或验证 GitHub CLI
    - task: PowerShell@2
      displayName: 'Install GitHub CLI'
      inputs:
        targetType: 'inline'
        script: |
          # 检查是否已安装 GitHub CLI
          $ghPath = where.exe gh 2>$null
          if ($ghPath) {
              Write-Host "GitHub CLI already installed at: $ghPath"
              gh --version
          } else {
              Write-Host "Installing GitHub CLI via winget..."
              try {
                  winget install --id GitHub.cli --silent --accept-package-agreements --accept-source-agreements
                  Write-Host "GitHub CLI installed successfully"
              } catch {
                  Write-Host "Winget installation failed, trying chocolatey..."
                  choco install gh -y
              }
          }
          
          # 验证安装
          gh --version

    # 🔧 设置环境变量
    - task: PowerShell@2
      displayName: 'Setup Environment'
      inputs:
        targetType: 'inline'
        script: |
          # 设置 GitHub token
          $env:GH_TOKEN = "$(GH_TOKEN)"
          Write-Host "##vso[task.setvariable variable=GH_TOKEN;issecret=true]$(GH_TOKEN)"
          
          # 验证 GitHub 认证
          gh auth status

    # ✅ 发布到不同平台
    - task: PowerShell@2
      displayName: 'Publish to Multiple Platforms'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Publishing x86 platform"
          dotnet publish $(webProject) --configuration $(buildConfiguration) --runtime win-x86 --output $(Build.ArtifactStagingDirectory)/x86

          Write-Host "Publishing ARM platform"
          dotnet publish $(webProject) --configuration $(buildConfiguration) --runtime linux-arm --output $(Build.ArtifactStagingDirectory)/arm

          Write-Host "Publishing macOS platform"
          dotnet publish $(webProject) --configuration $(buildConfiguration) --runtime osx-x64 --output $(Build.ArtifactStagingDirectory)/mac

    # 🟢 缓存 NuGet 及依赖项
    - task: Cache@2
      inputs:
        key: 'nuget | "$(Agent.OS)" | **/*.csproj'
        path: '$(NUGET_PACKAGES)'
        restoreKeys: 'nuget'
      displayName: 'Cache NuGet Packages'

    # 🟢 缓存 Aspire Workload
    - task: Cache@2
      inputs:
        key: 'aspire-workload | "$(Agent.OS)"'
        path: '~/.dotnet'
        restoreKeys: 'aspire-workload'
      displayName: 'Cache Aspire Workload'

    # 🟢 缓存 NuGet 工具
    - task: Cache@2
      inputs:
        key: 'nuget-tool | "$(Agent.OS)"'
        path: 'C:\ProgramData\nuget'
        restoreKeys: 'nuget-tool'
      displayName: 'Cache NuGet Tool'

    # ✅ 仅当缓存未命中时安装 Aspire Workload
    - script: |
        dotnet workload list | findstr /C:"aspire" || dotnet workload install aspire
      displayName: 'Check & Install Aspire Workload'
      condition: ne(variables['CACHE_RESTORED'], 'true')

    # ✅ 使用缓存的 NuGet 版本
    - task: NuGetToolInstaller@1
      displayName: 'Use Cached NuGet 6.3.0'
      inputs:
        versionSpec: '6.3.0'

    - script: |
        nuget sources remove -name nuget.org
      displayName: 'Remove Existing NuGet Source'

    - script: |
        dotnet nuget add source https://api.nuget.org/v3/index.json -n nuget.org
      displayName: 'Add NuGet Source'

    # ✅ 恢复 NuGet 依赖
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    # ✅ 解决方案构建
    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
        platform: 'Any CPU'
        configuration: '$(buildConfiguration)'

    # ✅ 恢复 Template 依赖
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(templateBuild)'

    # ✅ 构建 Template 解决方案
    - task: VSBuild@1
      inputs:
        solution: '$(templateBuild)'
        msbuildArgs: ''
        platform: 'Any CPU'
        configuration: '$(buildConfiguration)'

    # ✅ 推送 NuGet 包（支持失败继续）
    - task: NuGetCommand@2
      displayName: Senparc.Ncf.Template
      inputs:
        command: push
        packagesToPush: '**/Senparc.NCF.Template.*.nupkg'
        nuGetFeedType: external
        publishFeedCredentials: 'nuget-jeffrey-full-key'
      continueOnError: true
      condition: succeededOrFailed()

    # 🚀 创建 GitHub Release
    - task: PowerShell@2
      displayName: 'Create GitHub Release'
      inputs:
        targetType: 'inline'
        script: |
          try {
              Write-Host "Creating GitHub Release version $(version)"
              
              # 压缩发布文件以减少asset数量
              Compress-Archive -Path "$(Build.ArtifactStagingDirectory)/x86/*" -DestinationPath "$(Build.ArtifactStagingDirectory)/ncf-win-x86-$(version).zip" -Force
              Compress-Archive -Path "$(Build.ArtifactStagingDirectory)/arm/*" -DestinationPath "$(Build.ArtifactStagingDirectory)/ncf-linux-arm-$(version).zip" -Force  
              Compress-Archive -Path "$(Build.ArtifactStagingDirectory)/mac/*" -DestinationPath "$(Build.ArtifactStagingDirectory)/ncf-osx-x64-$(version).zip" -Force
              
              # 创建 release
              $releaseNotes = @"
          ## 🚀 NCF Release $(version)
          
          ### 📦 平台支持
          - Windows x86
          - Linux ARM
          - macOS x64
          
          ### 📅 构建信息
          - 构建号: $(Build.BuildNumber)
          - 源分支: $(Build.SourceBranchName)
          - 提交: $(Build.SourceVersion)
          - 发布时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
          
          ### 📋 变更
          本版本为自动构建发布，详细变更请查看提交历史。
          "@
              
              gh release create "v$(version)" `
                  --target "$(Build.SourceVersion)" `
                  --title "NCF Release v$(version)" `
                  --notes $releaseNotes `
                  "$(Build.ArtifactStagingDirectory)/ncf-win-x86-$(version).zip" `
                  "$(Build.ArtifactStagingDirectory)/ncf-linux-arm-$(version).zip" `
                  "$(Build.ArtifactStagingDirectory)/ncf-osx-x64-$(version).zip"
                  
              Write-Host "✅ GitHub Release created successfully"
          } catch {
              Write-Host "❌ Failed to create GitHub Release: $_"
              Write-Host "##vso[task.logissue type=warning]GitHub Release creation failed but build continues"
          }
      env:
        GH_TOKEN: $(GH_TOKEN)
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

    # ✅ 发布构建产物
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'sample'